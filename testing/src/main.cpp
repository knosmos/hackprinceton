#include <Arduino.h>
#include <pgmspace.h> // For PROGMEM support
#include <Adafruit_GFX.h> // Include the Adafruit GFX library
#include <Adafruit_GC9A01A.h> // Include the Adafruit GC9A1 library
#include <SPI.h> // Include SPI library for communication with the display

// Adafruit_GC9A01A::Adafruit_GC9A01A(int8_t cs, int8_t dc, int8_t mosi,
//     int8_t sclk, int8_t rst, int8_t miso)

#define TFT_CS   15 // Chip select pin
#define TFT_DC   2  // Data/Command pin
Adafruit_GC9A01A b(15, 2, 13, 14, -1, -1);

// 'sleep_1', 240x240px
// 'sleep_1', 64x64px
const unsigned char epd_bitmap_sleep_1 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xc3, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
	0xfc, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x3f, 
	0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 
	0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 
	0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0x00, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xf0, 
	0x03, 0xfc, 0x3f, 0xf0, 0xff, 0xc0, 0x03, 0xfc, 0x03, 0xfc, 0x3f, 0xf0, 0xff, 0xc0, 0x03, 0xfc, 
	0x0f, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x03, 0xff, 0x0f, 0xfc, 0x00, 0x00, 0xff, 0xf0, 0x03, 0xff, 
	0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
// 'sleep_2', 64x64px
const unsigned char epd_bitmap_sleep_2 [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
	0xfc, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x3f, 
	0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0f, 
	0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 
	0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0x00, 0xff, 0xff, 0x0f, 0xff, 0x0f, 0xc3, 0xf0, 0x00, 0xff, 0xff, 0x0f, 0xff, 0x0f, 0xc3, 0xf0, 
	0x03, 0xfc, 0x00, 0x0f, 0xff, 0x00, 0x03, 0xfc, 0x03, 0xfc, 0x00, 0x0f, 0xff, 0x00, 0x03, 0xfc, 
	0x0f, 0xfc, 0x00, 0x0f, 0xff, 0xc0, 0x0f, 0xff, 0x0f, 0xfc, 0x00, 0x0f, 0xff, 0xc0, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1056)
const int epd_bitmap_allArray_LEN = 2;
const unsigned char* epd_bitmap_allArray[2] = {
	epd_bitmap_sleep_1,
	epd_bitmap_sleep_2
};


// Color definitions
#define BLACK    0x0000
#define BLUE     0x001F
#define RED      0xF800
#define GREEN    0x07E0
#define CYAN     0x07FF
#define MAGENTA  0xF81F
#define YELLOW   0xFFE0 
#define WHITE    0xFFFF

// buffer
uint16_t *buffer;
uint16_t _width, _height;

class Buffer :public Adafruit_GFX {
public:
    Buffer(int16_t w, int16_t h) : Adafruit_GFX(w, h) {
        _width = w;
        _height = h;
        buffer = (uint16_t *)malloc(w * h * sizeof(uint16_t));
        memset(buffer, 0, w * h * sizeof(uint16_t));
    }

    ~Buffer() {
        free(buffer);
    }

    void drawPixel(int16_t x, int16_t y, uint16_t color) {
        if ((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
            buffer[x + y * _width] = color;
        }
    }

    uint16_t* getBuffer() {
        return buffer;
    }
};

void setup() {
    Serial.begin(115200);
    delay(1000);
    Serial.println("Setup done.");
    
    // Initialize the display
    // Display initialization code goes here
    b.begin();

    // Buffer b(240, 240); // Create a buffer for the display
    b.setRotation(0); // Set rotation if needed
    b.fillScreen(BLUE); // Clear the screen with white color
    b.setTextColor(WHITE); // Set text color to black
    // b.fillScreen(WHITE); // Clear the screen with white color
    // b.setTextColor(BLACK); // Set text color to black
    // b.setTextSize(10); // Set text size
    // b.setCursor(0, 0); // Set cursor position
    // b.println("Hello, World!"); // Print a message to the display

    // b.drawBitmap(100, 100, epd_bitmap_blob, 64, 64, BLACK); // Draw the bitmap at (0, 0)

    // tft.setAddrWindow(0, 0, 240, 240);
    // digitalWrite(TFT_DC, HIGH);
    // digitalWrite(TFT_CS, LOW);
    // SPI.beginTransaction(SPISettings(80000000, MSBFIRST, SPI_MODE0));
    //    for (uint16_t i = 0; i < 240*240; i++)
    //    {
    //       SPI.write16(buffer[i]);
    //    }
    // SPI.endTransaction();
    // digitalWrite(TFT_CS, HIGH);

    // print display buffer
    // for (int i=0; i<240; i++){
    //     for (int j=0; j<240; j++){
    //         Serial.print(buffer[i*240+j], HEX);
    //         Serial.print(" ");
    //     }
    //     Serial.println("");
    // }
}

void loop() {
    // Main loop code goes here (not provided in the original code)
    Serial.println("sleep_1");
    b.drawBitmap(88, 88, epd_bitmap_sleep_1, 64, 64, WHITE); // Draw the bitmap at (0, 0)
    delay(100); // Just a delay for demonstration purposes
    Serial.println("sleep_2");
    b.drawBitmap(88, 88, epd_bitmap_sleep_2, 64, 64, BLUE); // Draw the bitmap at (0, 0)
    delay(100); // Just a delay for demonstration purposes
}